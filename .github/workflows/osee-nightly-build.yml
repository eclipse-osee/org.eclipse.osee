name: OSEE Nightly Build

on:
  push:
    branches:
      - main
    paths:
      - '.github/docker/osee-server/**'
  schedule:
    - cron: '0 0 * * *'

concurrency:
  group: ${{ github.ref }}-${{ github.workflow }}
  cancel-in-progress: true

permissions:
  contents: read
  packages: write

env:
  ARTIFACT_PATH: "plugins/org.eclipse.osee.server.p2/target/org.eclipse.osee.server.runtime.zip"
  SERVER_PATH: "osee_server"
  SERVER_ZIP: "org.eclipse.osee.server.runtime.zip"
  IMAGE_DIRECTORY: ".github/docker/osee-server/Dockerfile"
  PRODUCT_ZIP_GLOB: "plugins/org.eclipse.osee.client.all.product/target/products/*.zip"
  PRODUCT_GZ_GLOB: "plugins/org.eclipse.osee.client.all.product/target/products/*.gz"

jobs:
  build_server_binaries:
    runs-on: ubuntu-latest
    outputs:
      run_workflow: ${{ steps.check_conditions.outputs.run_workflow }}
    container:
      image: ghcr.io/eclipse-osee/org.eclipse.osee/maven-node:20250922213428
    strategy:
      matrix:
        include:
          - IMAGE_NAME: "osee-server"
            ANGULAR_BUILD_TYPE: "forced_sso_java_release"
            SKIP_PRODUCT_BUILD: 'false'
            UPLOAD_PRODUCTS: 'true'
          - IMAGE_NAME: "osee-demo-server"
            ANGULAR_BUILD_TYPE: "demo_java_release"
            SKIP_PRODUCT_BUILD: 'true'
            UPLOAD_PRODUCTS: 'false'

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Check Conditions For Running Workflow
        id: check_conditions
        shell: bash
        run: |
          git config --global --add safe.directory /__w/org.eclipse.osee/org.eclipse.osee
          CHANGES=$(git log --since='25 hours ago' --oneline)

          echo "Most recent change in the last 25 hours (if any): "
          echo "${CHANGES}"

          if [[ -n "$CHANGES" || "${{ github.event_name }}" == "push" ]]; then
            echo "Changes detected in the last 25 hours or triggered by push."
            echo "run_workflow=true" >> $GITHUB_OUTPUT
          else
            echo "No changes in the last 25 hours and not triggered by push."
            echo "run_workflow=false" >> $GITHUB_OUTPUT
          fi

      - name: Build OSEE Binaries
        if: steps.check_conditions.outputs.run_workflow == 'true'
        uses: ./.github/actions/build-osee-binary
        with:
          SKIP_ANGULAR_TESTS: 'true'
          SKIP_JAVA_TESTS: 'true'
          SKIP_PRODUCT_BUILD: ${{ matrix.SKIP_PRODUCT_BUILD }}
          ANGULAR_BUILD_TYPE: ${{ matrix.ANGULAR_BUILD_TYPE }}

      - name: Archive Server Runtime Zip
        if: steps.check_conditions.outputs.run_workflow == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.IMAGE_NAME }}-binaries
          path: ${{ env.ARTIFACT_PATH }}

      - name: Archive Client Product Artifacts (osee-server only)
        if: steps.check_conditions.outputs.run_workflow == 'true' && matrix.UPLOAD_PRODUCTS == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: osee-server-products
          path: |
            ${{ env.PRODUCT_ZIP_GLOB }}
            ${{ env.PRODUCT_GZ_GLOB }}
          if-no-files-found: error

  docker_build_and_push:
    runs-on: ubuntu-latest
    needs: build_server_binaries
    if: needs.build_server_binaries.outputs.run_workflow == 'true'
    strategy:
      matrix:
        include:
          - IMAGE_NAME: "osee-server"
          - IMAGE_NAME: "osee-demo-server"

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: create image
        uses: ./.github/actions/osee-server-container-build
        with:
          IMAGE_NAME: ${{ matrix.IMAGE_NAME }}
          SERVER_PATH: ${{ env.SERVER_PATH }}
          IMAGE_DIRECTORY: ${{ env.IMAGE_DIRECTORY }}

  publish_nightly_release:
    runs-on: ubuntu-latest
    needs: build_server_binaries
    if: needs.build_server_binaries.outputs.run_workflow == 'true'
    permissions:
      contents: write
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Download Product Artifacts (osee-server only)
        uses: actions/download-artifact@v4
        with:
          name: osee-server-products
          path: products

      - name: Compute Nightly Tag
        id: nightly_tag
        shell: bash
        run: |
          TAG="nightly-$(date -u +'%Y%m%d')"
          echo "tag_name=$TAG" >> "$GITHUB_OUTPUT"
          echo "release_name=Nightly $TAG" >> "$GITHUB_OUTPUT"

      - name: Create Pre-release and Upload Assets
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.nightly_tag.outputs.tag_name }}
          name: ${{ steps.nightly_tag.outputs.release_name }}
          body: |
            # Automated OSEE nightly build.

            ## Server Images

            | Server          | Image name       | Tag                 | Pull command                                                                 |
            |-----------------|------------------|---------------------|------------------------------------------------------------------------------|
            | Standard Server | osee-server      | `${{ github.sha }}` | `docker pull ghcr.io/${{ github.repository }}/osee-server:${{ github.sha }}` |
            | Demo Server     | osee-demo-server | `${{ github.sha }}` | `docker pull ghcr.io/${{ github.repository }}/osee-demo-server:${{ github.sha }}` |

            ## Client Downloads

            | OS      | Format | Asset |
            |---------|--------|-------|
            | Windows | ZIP    | OSEE-Client-Windows.zip |
            | Linux   | TAR.GZ | OSEE-Client-Linux.tar.gz |

          prerelease: true
          draft: false
          files: |
            products/**/*.zip#OSEE-Client-Windows.zip
            products/**/*.gz#OSEE-Client-Linux.tar.gz
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
