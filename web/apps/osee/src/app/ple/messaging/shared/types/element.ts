/*********************************************************************
 * Copyright (c) 2021 Boeing
 *
 * This program and the accompanying materials are made
 * available under the terms of the Eclipse Public License 2.0
 * which is available at https://www.eclipse.org/legal/epl-2.0/
 *
 * SPDX-License-Identifier: EPL-2.0
 *
 * Contributors:
 *     Boeing - initial API and implementation
 **********************************************************************/
import { applicabilitySentinel, type applic } from '@osee/applicability/types';

import type { hasChanges } from '@osee/shared/types/change-report';
import {
	DisplayablePlatformTypeProps,
	EditablePlatformTypeProps,
	PlatformType,
} from './platformType';
import {
	ArrayHeaderPlatformType,
	PlatformTypeSentinel,
} from '@osee/messaging/shared/enumerations';
import { arrayIndexOrder } from './array-index-order';
import { attribute } from '@osee/attributes/types';
import { ATTRIBUTETYPEIDENUM } from '@osee/attributes/constants';

export const diffableElementHeaders: (keyof DiffableElementProps)[] = [
	'name',
	'description',
	'notes',
	'interfaceElementIndexEnd',
	'interfaceElementIndexStart',
	'interfaceElementAlterable',
	'interfaceElementBlockData',
	'interfaceDefaultValue',
	'applicability',
	'interfaceElementWriteArrayHeaderName',
	'interfaceElementArrayIndexOrder',
	'interfaceElementArrayIndexDelimiterOne',
	'interfaceElementArrayIndexDelimiterTwo',
	'enumLiteral',
];

type __elementAttr = {
	name: Required<attribute<string, typeof ATTRIBUTETYPEIDENUM.NAME>>;
	description: Required<
		attribute<string, typeof ATTRIBUTETYPEIDENUM.DESCRIPTION>
	>;
	notes: Required<attribute<string, typeof ATTRIBUTETYPEIDENUM.NOTES>>;
	interfaceElementIndexEnd: Required<
		attribute<number, typeof ATTRIBUTETYPEIDENUM.INTERFACEELEMENTEND>
	>;
	interfaceElementIndexStart: Required<
		attribute<number, typeof ATTRIBUTETYPEIDENUM.INTERFACEELEMENTSTART>
	>;
	interfaceElementAlterable: Required<
		attribute<boolean, typeof ATTRIBUTETYPEIDENUM.INTERFACEELEMENTALTERABLE>
	>;
	interfaceElementBlockData: Required<
		attribute<boolean, typeof ATTRIBUTETYPEIDENUM.INTERFACEELEMENTBLOCKDATA>
	>;
	interfaceDefaultValue: Required<
		attribute<string, typeof ATTRIBUTETYPEIDENUM.INTERFACEDEFAULTVAL>
	>;
	enumLiteral: Required<
		attribute<string, typeof ATTRIBUTETYPEIDENUM.INTERFACEENUMLITERAL>
	>;
	interfaceElementWriteArrayHeaderName: Required<
		attribute<
			boolean,
			typeof ATTRIBUTETYPEIDENUM.INTERFACEELEMENTWRITEARRAYHEADERNAME
		>
	>;
	interfaceElementArrayIndexOrder: Required<
		attribute<
			arrayIndexOrder,
			typeof ATTRIBUTETYPEIDENUM.INTERFACELEMENTARRAYINDEXORDER
		>
	>;
	interfaceElementArrayIndexDelimiterOne: Required<
		attribute<
			string,
			typeof ATTRIBUTETYPEIDENUM.INTERFACEELEMENTARRAYINDEXDELIMITERONE
		>
	>;
	interfaceElementArrayIndexDelimiterTwo: Required<
		attribute<
			string,
			typeof ATTRIBUTETYPEIDENUM.INTERFACEELEMENTARRAYINDEXDELIMITERTWO
		>
	>;
};

type _nonHeaderElementAttr = {
	interfaceElementArrayHeader: Required<
		attribute<false, typeof ATTRIBUTETYPEIDENUM.INTERFACEELEMENTARRAYHEADER>
	>;
};

type _headerElementAttr = {
	interfaceElementArrayHeader: Required<
		attribute<true, typeof ATTRIBUTETYPEIDENUM.INTERFACEELEMENTARRAYHEADER>
	>;
};

export type ElementAttr = __elementAttr &
	(_nonHeaderElementAttr | _headerElementAttr);

type _nonHeaderPlatformType = {
	platformType: PlatformType;
};

type _headerPlatformType = {
	platformType: ArrayHeaderPlatformType;
};

type _platformType = _nonHeaderPlatformType | _headerPlatformType;

export type DiffableElementProps = ElementAttr &
	Required<{ applicability: applic }>;
type _computedProps = Partial<{
	beginWord: number;
	beginByte: number;
	endWord: number;
	endByte: number;
	autogenerated: boolean;
	elementSizeInBytes: number;
	elementSizeInBits: number;
}>;

export type EditableElementProps = DiffableElementProps &
	_platformType &
	EditablePlatformTypeProps;
type elementProps = DiffableElementProps & _computedProps & _platformType;
export type DisplayableElementProps = elementProps &
	DisplayablePlatformTypeProps;

type _elementChanges = hasChanges<DiffableElementProps> &
	hasChanges<_platformType>;

type elementChanges = {
	added: boolean;
	deleted: boolean;
	changes: _elementChanges;
};

export type element = Partial<elementChanges> &
	Required<{
		id: `${number}`;
		gammaId: `${number}`;
		arrayElements: element[];
	}> &
	elementProps;

export type elementWithPathsAndButtons = element & {
	paths: string[];
	buttonNames: string[];
};

export type elementImportToken = Pick<
	element,
	| 'id'
	| 'name'
	| 'description'
	| 'notes'
	| 'enumLiteral'
	| 'interfaceDefaultValue'
	| 'interfaceElementAlterable'
	| 'interfaceElementIndexEnd'
	| 'interfaceElementIndexStart'
>;

export const elementSentinel: element = {
	id: '-1',
	gammaId: '-1',
	name: {
		id: '-1',
		gammaId: '-1',
		typeId: '1152921504606847088',
		value: '',
	},
	description: {
		id: '-1',
		gammaId: '-1',
		typeId: '1152921504606847090',
		value: '',
	},
	notes: {
		id: '-1',
		gammaId: '-1',
		typeId: '1152921504606847085',
		value: '',
	},
	interfaceDefaultValue: {
		id: '-1',
		gammaId: '-1',
		typeId: '2886273464685805413',
		value: '',
	},
	interfaceElementIndexEnd: {
		id: '-1',
		gammaId: '-1',
		typeId: '2455059983007225802',
		value: 0,
	},
	interfaceElementIndexStart: {
		id: '-1',
		gammaId: '-1',
		typeId: '2455059983007225801',
		value: 0,
	},
	platformType: new PlatformTypeSentinel(),
	arrayElements: [],
	applicability: {
		id: '1',
		name: 'Base',
	},
	interfaceElementAlterable: {
		id: '-1',
		gammaId: '-1',
		typeId: '2455059983007225788',
		value: false,
	},
	interfaceElementBlockData: {
		id: '-1',
		gammaId: '-1',
		typeId: '1523923981411079299',
		value: false,
	},
	interfaceElementArrayHeader: {
		id: '-1',
		gammaId: '-1',
		typeId: '3313203088521964923',
		value: false,
	},
	interfaceElementWriteArrayHeaderName: {
		id: '-1',
		gammaId: '-1',
		typeId: '3313203088521964924',
		value: false,
	},
	enumLiteral: {
		id: '-1',
		gammaId: '-1',
		typeId: '2455059983007225803',
		value: '',
	},
	interfaceElementArrayIndexOrder: {
		id: '-1',
		gammaId: '-1',
		typeId: '6818939106523472581',
		value: 'OUTER_INNER',
	},
	interfaceElementArrayIndexDelimiterOne: {
		id: '-1',
		gammaId: '-1',
		typeId: '6818939106523472582',
		value: ' ',
	},
	interfaceElementArrayIndexDelimiterTwo: {
		id: '-1',
		gammaId: '-1',
		typeId: '6818939106523472583',
		value: ' ',
	},
};

export const elementHeaderSentinel: element = {
	id: '-1',
	gammaId: '-1',
	name: {
		id: '-1',
		gammaId: '-1',
		typeId: '1152921504606847088',
		value: '',
	},
	description: {
		id: '-1',
		gammaId: '-1',
		typeId: '1152921504606847090',
		value: '',
	},
	notes: {
		id: '-1',
		gammaId: '-1',
		typeId: '1152921504606847085',
		value: '',
	},
	interfaceElementIndexEnd: {
		id: '-1',
		gammaId: '-1',
		typeId: '2455059983007225802',
		value: 0,
	},
	interfaceElementIndexStart: {
		id: '-1',
		gammaId: '-1',
		typeId: '2455059983007225801',
		value: 0,
	},
	interfaceElementAlterable: {
		id: '-1',
		gammaId: '-1',
		typeId: '2455059983007225788',
		value: false,
	},
	interfaceElementBlockData: {
		id: '-1',
		gammaId: '-1',
		typeId: '1523923981411079299',
		value: false,
	},
	interfaceElementArrayHeader: {
		id: '-1',
		gammaId: '-1',
		typeId: '3313203088521964923',
		value: true,
	},
	interfaceElementWriteArrayHeaderName: {
		id: '-1',
		gammaId: '-1',
		typeId: '3313203088521964924',
		value: false,
	},
	interfaceDefaultValue: {
		id: '-1',
		gammaId: '-1',
		typeId: '2886273464685805413',
		value: '',
	},
	platformType: new ArrayHeaderPlatformType(),
	arrayElements: [],
	enumLiteral: {
		id: '-1',
		gammaId: '-1',
		typeId: '2455059983007225803',
		value: '',
	},
	applicability: applicabilitySentinel,
	autogenerated: true,
	interfaceElementArrayIndexOrder: {
		id: '-1',
		gammaId: '-1',
		typeId: '6818939106523472581',
		value: 'OUTER_INNER',
	},
	interfaceElementArrayIndexDelimiterOne: {
		id: '-1',
		gammaId: '-1',
		typeId: '6818939106523472582',
		value: ' ',
	},
	interfaceElementArrayIndexDelimiterTwo: {
		id: '-1',
		gammaId: '-1',
		typeId: '6818939106523472583',
		value: ' ',
	},
};
