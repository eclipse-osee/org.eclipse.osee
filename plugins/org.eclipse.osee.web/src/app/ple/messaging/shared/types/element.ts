import type { applic } from '@osee/shared/types/applicability';

/*********************************************************************
 * Copyright (c) 2021 Boeing
 *
 * This program and the accompanying materials are made
 * available under the terms of the Eclipse Public License 2.0
 * which is available at https://www.eclipse.org/legal/epl-2.0/
 *
 * SPDX-License-Identifier: EPL-2.0
 *
 * Contributors:
 *     Boeing - initial API and implementation
 **********************************************************************/
import type { hasChanges } from '@osee/shared/types/change-report';
import { ArrayHeaderPlatformType, PlatformType } from './platformType';
export type element = interfaceElement | arrayHeaderElement;

interface _element {
	id: string;
	name: string;
	description: string;
	notes: string;
	interfacePlatformTypeDescription?: string;
	interfacePlatformTypeMinval?: string;
	interfacePlatformTypeMaxval?: string;
	elementSizeInBytes?: number;
	elementSizeInBits?: number;
	interfaceElementIndexEnd: number;
	interfaceElementIndexStart: number;
	interfaceElementAlterable: boolean;
	interfaceDefaultValue: string;
	units?: string;
	enumLiteral: string;
	arrayElements: element[];
	beginWord?: number;
	beginByte?: number;
	endWord?: number;
	endByte?: number;
	autogenerated?: boolean;
	logicalType?: string;
	applicability?: applic;
}

interface arrayHeaderElement extends _element {
	interfaceElementArrayHeader: true;
	platformType: ArrayHeaderPlatformType;
}

interface interfaceElement extends _element {
	interfaceElementArrayHeader: false;
	platformType: PlatformType;
}

export type elementWithPathsAndButtons = element & {
	paths: string[];
	buttonNames: string[];
};

export type elementWithChanges = element & {
	added: boolean;
	deleted: boolean;
	changes: hasChanges<element>;
};

export type elementImportToken = Pick<
	_element,
	| 'id'
	| 'name'
	| 'description'
	| 'notes'
	| 'enumLiteral'
	| 'interfaceDefaultValue'
	| 'interfaceElementAlterable'
	| 'interfaceElementIndexEnd'
	| 'interfaceElementIndexStart'
>;
